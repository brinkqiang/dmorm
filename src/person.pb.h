// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef PROTOBUF_person_2eproto__INCLUDED
#define PROTOBUF_person_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_person_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultstb_PersonImpl();
void InitDefaultstb_Person();
void InitDefaultstb_Person2Impl();
void InitDefaultstb_Person2();
inline void InitDefaults() {
  InitDefaultstb_Person();
  InitDefaultstb_Person2();
}
}  // namespace protobuf_person_2eproto
namespace db {
class tb_Person;
class tb_PersonDefaultTypeInternal;
extern tb_PersonDefaultTypeInternal _tb_Person_default_instance_;
class tb_Person2;
class tb_Person2DefaultTypeInternal;
extern tb_Person2DefaultTypeInternal _tb_Person2_default_instance_;
}  // namespace db
namespace db {

enum MessageId {
  MSGID_tb_Person = 1000,
  MSGID_tb_Person2 = 1001
};
bool MessageId_IsValid(int value);
const MessageId MessageId_MIN = MSGID_tb_Person;
const MessageId MessageId_MAX = MSGID_tb_Person2;
const int MessageId_ARRAYSIZE = MessageId_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageId_descriptor();
inline const ::std::string& MessageId_Name(MessageId value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageId_descriptor(), value);
}
inline bool MessageId_Parse(
    const ::std::string& name, MessageId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageId>(
    MessageId_descriptor(), name, value);
}
enum PhoneType {
  MOBILE = 0,
  HOME = 1,
  WORK = 2
};
bool PhoneType_IsValid(int value);
const PhoneType PhoneType_MIN = MOBILE;
const PhoneType PhoneType_MAX = WORK;
const int PhoneType_ARRAYSIZE = PhoneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhoneType_descriptor();
inline const ::std::string& PhoneType_Name(PhoneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhoneType_descriptor(), value);
}
inline bool PhoneType_Parse(
    const ::std::string& name, PhoneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhoneType>(
    PhoneType_descriptor(), name, value);
}
// ===================================================================

class tb_Person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.tb_Person) */ {
 public:
  tb_Person();
  virtual ~tb_Person();

  tb_Person(const tb_Person& from);

  inline tb_Person& operator=(const tb_Person& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tb_Person(tb_Person&& from) noexcept
    : tb_Person() {
    *this = ::std::move(from);
  }

  inline tb_Person& operator=(tb_Person&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tb_Person* internal_default_instance() {
    return reinterpret_cast<const tb_Person*>(
               &_tb_Person_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(tb_Person* other);
  friend void swap(tb_Person& a, tb_Person& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tb_Person* New() const PROTOBUF_FINAL { return New(NULL); }

  tb_Person* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tb_Person& from);
  void MergeFrom(const tb_Person& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tb_Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string number = 2;
  bool has_number() const;
  void clear_number();
  static const int kNumberFieldNumber = 2;
  const ::std::string& number() const;
  void set_number(const ::std::string& value);
  #if LANG_CXX11
  void set_number(::std::string&& value);
  #endif
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  ::std::string* mutable_number();
  ::std::string* release_number();
  void set_allocated_number(::std::string* number);

  // optional string email = 3;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 3;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional .db.PhoneType phonetype = 4;
  bool has_phonetype() const;
  void clear_phonetype();
  static const int kPhonetypeFieldNumber = 4;
  ::db::PhoneType phonetype() const;
  void set_phonetype(::db::PhoneType value);

  // optional .db.MessageId id = 1 [default = MSGID_tb_Person];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::db::MessageId id() const;
  void set_id(::db::MessageId value);

  // @@protoc_insertion_point(class_scope:db.tb_Person)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_number();
  void clear_has_number();
  void set_has_email();
  void clear_has_email();
  void set_has_phonetype();
  void clear_has_phonetype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr number_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  int phonetype_;
  int id_;
  friend struct ::protobuf_person_2eproto::TableStruct;
  friend void ::protobuf_person_2eproto::InitDefaultstb_PersonImpl();
};
// -------------------------------------------------------------------

class tb_Person2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:db.tb_Person2) */ {
 public:
  tb_Person2();
  virtual ~tb_Person2();

  tb_Person2(const tb_Person2& from);

  inline tb_Person2& operator=(const tb_Person2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  tb_Person2(tb_Person2&& from) noexcept
    : tb_Person2() {
    *this = ::std::move(from);
  }

  inline tb_Person2& operator=(tb_Person2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tb_Person2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const tb_Person2* internal_default_instance() {
    return reinterpret_cast<const tb_Person2*>(
               &_tb_Person2_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(tb_Person2* other);
  friend void swap(tb_Person2& a, tb_Person2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline tb_Person2* New() const PROTOBUF_FINAL { return New(NULL); }

  tb_Person2* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tb_Person2& from);
  void MergeFrom(const tb_Person2& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tb_Person2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .db.MessageId id = 1 [default = MSGID_tb_Person2];
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::db::MessageId id() const;
  void set_id(::db::MessageId value);

  // @@protoc_insertion_point(class_scope:db.tb_Person2)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int id_;
  friend struct ::protobuf_person_2eproto::TableStruct;
  friend void ::protobuf_person_2eproto::InitDefaultstb_Person2Impl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// tb_Person

// optional .db.MessageId id = 1 [default = MSGID_tb_Person];
inline bool tb_Person::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void tb_Person::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void tb_Person::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void tb_Person::clear_id() {
  id_ = 1000;
  clear_has_id();
}
inline ::db::MessageId tb_Person::id() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.id)
  return static_cast< ::db::MessageId >(id_);
}
inline void tb_Person::set_id(::db::MessageId value) {
  assert(::db::MessageId_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.tb_Person.id)
}

// optional string number = 2;
inline bool tb_Person::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_Person::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_Person::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_Person::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number();
}
inline const ::std::string& tb_Person::number() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.number)
  return number_.GetNoArena();
}
inline void tb_Person::set_number(const ::std::string& value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.tb_Person.number)
}
#if LANG_CXX11
inline void tb_Person::set_number(::std::string&& value) {
  set_has_number();
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.tb_Person.number)
}
#endif
inline void tb_Person::set_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.tb_Person.number)
}
inline void tb_Person::set_number(const char* value, size_t size) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.tb_Person.number)
}
inline ::std::string* tb_Person::mutable_number() {
  set_has_number();
  // @@protoc_insertion_point(field_mutable:db.tb_Person.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_Person::release_number() {
  // @@protoc_insertion_point(field_release:db.tb_Person.number)
  clear_has_number();
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_Person::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    set_has_number();
  } else {
    clear_has_number();
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:db.tb_Person.number)
}

// optional string email = 3;
inline bool tb_Person::has_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_Person::set_has_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_Person::clear_has_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_Person::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& tb_Person::email() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.email)
  return email_.GetNoArena();
}
inline void tb_Person::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.tb_Person.email)
}
#if LANG_CXX11
inline void tb_Person::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.tb_Person.email)
}
#endif
inline void tb_Person::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.tb_Person.email)
}
inline void tb_Person::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.tb_Person.email)
}
inline ::std::string* tb_Person::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:db.tb_Person.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_Person::release_email() {
  // @@protoc_insertion_point(field_release:db.tb_Person.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_Person::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:db.tb_Person.email)
}

// optional .db.PhoneType phonetype = 4;
inline bool tb_Person::has_phonetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tb_Person::set_has_phonetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tb_Person::clear_has_phonetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tb_Person::clear_phonetype() {
  phonetype_ = 0;
  clear_has_phonetype();
}
inline ::db::PhoneType tb_Person::phonetype() const {
  // @@protoc_insertion_point(field_get:db.tb_Person.phonetype)
  return static_cast< ::db::PhoneType >(phonetype_);
}
inline void tb_Person::set_phonetype(::db::PhoneType value) {
  assert(::db::PhoneType_IsValid(value));
  set_has_phonetype();
  phonetype_ = value;
  // @@protoc_insertion_point(field_set:db.tb_Person.phonetype)
}

// -------------------------------------------------------------------

// tb_Person2

// optional .db.MessageId id = 1 [default = MSGID_tb_Person2];
inline bool tb_Person2::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tb_Person2::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tb_Person2::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tb_Person2::clear_id() {
  id_ = 1001;
  clear_has_id();
}
inline ::db::MessageId tb_Person2::id() const {
  // @@protoc_insertion_point(field_get:db.tb_Person2.id)
  return static_cast< ::db::MessageId >(id_);
}
inline void tb_Person2::set_id(::db::MessageId value) {
  assert(::db::MessageId_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:db.tb_Person2.id)
}

// optional string name = 2;
inline bool tb_Person2::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tb_Person2::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tb_Person2::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tb_Person2::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& tb_Person2::name() const {
  // @@protoc_insertion_point(field_get:db.tb_Person2.name)
  return name_.GetNoArena();
}
inline void tb_Person2::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:db.tb_Person2.name)
}
#if LANG_CXX11
inline void tb_Person2::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:db.tb_Person2.name)
}
#endif
inline void tb_Person2::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:db.tb_Person2.name)
}
inline void tb_Person2::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:db.tb_Person2.name)
}
inline ::std::string* tb_Person2::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:db.tb_Person2.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tb_Person2::release_name() {
  // @@protoc_insertion_point(field_release:db.tb_Person2.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tb_Person2::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:db.tb_Person2.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace db

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::db::MessageId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::db::MessageId>() {
  return ::db::MessageId_descriptor();
}
template <> struct is_proto_enum< ::db::PhoneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::db::PhoneType>() {
  return ::db::PhoneType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_person_2eproto__INCLUDED
